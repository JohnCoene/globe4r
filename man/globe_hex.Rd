% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hex.R
\name{globe_hex}
\alias{globe_hex}
\title{Hex}
\usage{
globe_hex(globe, ..., data = NULL, inherit_coords = TRUE,
  on_click = NULL, on_right_click = NULL, on_hover = NULL)
}
\arguments{
\item{globe}{An object of class \code{globe} as returned by
\code{\link{create_globe}}, or an object of class \code{globeProxy}
as returned by \code{\link{globeProxy}}.}

\item{...}{Coordinates, as specified by \code{\link{coords}}.}

\item{data}{A data.frame of points to draw.}

\item{inherit_coords}{Whether to inherit the coordinates (\code{\link{coords}})
from \code{\link{create_globe}}. Only applies to method applied to object of class
\code{globe4r} not on objects of class \code{globeProxy}.}

\item{on_click, on_right_click, on_hover}{JavaScript functions as \link[htmlwidgets]{JS} 
or \code{TRUE} to pick up the event from Shiny server side, see example in \code{\link{globe_bars}}.}
}
\description{
Add hexbin to a globe.
}
\section{Coordinates}{

Valid coordinates (depending on layer).
\itemize{
  \item{\code{lat}, \code{lon}},
  \item{\code{altitude}}
  \item{\code{margin}}
  \item{\code{weight}}
  \item{\code{resolution}}
  \item{\code{merge}}
  \item{\code{transition}}
}
}

\examples{
# basic
create_globe() \%>\% 
  globe_pov(-21, 179) \%>\% 
  globe_hex(coords(lat, long, weight = 1L), data = quakes) \%>\% 
  scale_hex_side_color(max = 5) \%>\% 
  scale_hex_cap_color(max = 5)

library(shiny)

ui <- fluidPage(
  actionButton("add", "Add hex"),
  globeOutput("globe")
)

server <- function(input, output){
  output$globe <- renderGlobe({
    create_globe() 
  })

  observeEvent(input$add, {
    globeProxy("globe") \%>\% 
      globe_hex(coords(lat, long, weight = mag), data = quakes) \%>\% 
      globe_pov(-21, 179)
  })
}

\dontrun{shinyApp(ui, server)}

}
