% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/arcs.R
\name{globe_arcs}
\alias{globe_arcs}
\title{Arcs}
\usage{
globe_arcs(
  globe,
  ...,
  data = NULL,
  inherit_coords = TRUE,
  on_click = NULL,
  on_right_click = NULL,
  on_hover = NULL
)
}
\arguments{
\item{globe}{An object of class \code{globe} as returned by
\code{\link{create_globe}}, or an object of class \code{globeProxy}
as returned by \code{\link{globeProxy}}.}

\item{...}{Coordinates, as specified by \code{\link{coords}}.}

\item{data}{A data.frame of points to draw.}

\item{inherit_coords}{Whether to inherit the coordinates (\code{\link{coords}})
from \code{\link{create_globe}}. Only applies to method applied to object of class
\code{globe4r} not on objects of class \code{globeProxy}.}

\item{on_click}{JavaScript functions as \link[htmlwidgets]{JS} 
or \code{TRUE} to pick up the event from Shiny server side, see example.}

\item{on_right_click}{JavaScript functions as \link[htmlwidgets]{JS} 
or \code{TRUE} to pick up the event from Shiny server side, see example.}

\item{on_hover}{JavaScript functions as \link[htmlwidgets]{JS} 
or \code{TRUE} to pick up the event from Shiny server side, see example.}
}
\description{
Add arcs to a globe.
}
\section{Coordinates}{

Valid coordinates.
\itemize{
  \item{\code{start_lat}, \code{start_lon}}
  \item{\code{end_lat}, \code{end_lon}}
  \item{\code{altitude}}
  \item{\code{color}}
  \item{\code{label}}
  \item{\code{transition}}
  \item{\code{altitude_scale}}
  \item{\code{stroke}}
  \item{\code{curve_resolution}}
  \item{\code{circular_resolution}}
  \item{\code{dash_length}}
  \item{\code{dash_gap}}
  \item{\code{dash_initial_gap}}
  \item{\code{dash_animate_time}}
}
}

\examples{
# basic
create_globe() \%>\% 
  globe_arcs(
    data= usflights, 
    coords(
      start_lat = start_lat, 
      start_lon = start_lon, 
      end_lat = end_lat, 
      end_lon = end_lon,
      color = cnt
    )
  ) \%>\% 
  scale_arc_color()

# in shiny
library(shiny)

ui <- fluidPage(
  actionButton("add", "Add arcs"),
  globeOutput("globe")
)

server <- function(input, output){
  output$globe <- renderGlobe({
    create_globe()
  })

  observeEvent(input$add, {
    globeProxy("globe") \%>\% 
      globe_arcs(
        coords(start_lat, start_lon, end_lat, end_lon),
        data = usflights 
      )
  })
}

if(interactive()) shinyApp(ui, server)
}
